I"o<h2 id="关于-python-版本">关于 Python 版本</h2>

<p>~&gt; 2.0 与 ~&gt; 3.0 都可以实现想要的功能</p>

<h2 id="anaconda">Anaconda</h2>

<h2 id="numpy-基础">Numpy 基础</h2>

<ul>
  <li>打印帮助文档</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span> <span class="p">(</span><span class="n">help</span><span class="p">(</span><span class="n">numpy</span><span class="p">))</span>
</code></pre></div></div>

<ul>
  <li>读取文件</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">genfromtxt</span><span class="p">(</span><span class="s">"aaa.txt"</span><span class="p">,</span> <span class="n">delimiter</span><span class="o">=</span><span class="s">","</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="nb">str</span><span class="p">,</span> <span class="n">skip_header</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>array</li>
</ul>

<p>将普通 list 转换成 ndarray (几维数据就用几个中括号)</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 一维
vector = numpy.array([1, 2, 3, 4])
# 二维矩阵
matrix = numpy.array([[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6]])
</code></pre></div></div>

<ul>
  <li>shape</li>
</ul>

<p>获取 ndarray 结构 (方便调试)</p>

<p>如 (4,) or (2, 3) # 对于矩阵 (行, 列)</p>

<ul>
  <li>读取数组元素</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 一维
</span><span class="n">vector</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="c1"># 二维矩阵
</span><span class="n">matrix</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span> <span class="c1"># 行, 列
# 一维切片
</span><span class="n">vector</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">3</span><span class="p">]</span>
<span class="c1"># 二维矩阵某一列
</span><span class="n">matrix</span><span class="p">[:,</span> <span class="mi">2</span><span class="p">]</span>
<span class="c1"># 二维矩阵多列
</span><span class="n">matrix</span><span class="p">[:,</span> <span class="mi">0</span><span class="p">:</span><span class="mi">2</span><span class="p">]</span>
</code></pre></div></div>

<ul>
  <li>dtype</li>
</ul>

<p>numpy 中元素类型必须是一致的，如果类型不一致，会自动转换类型，如 int -&gt; float, int -&gt; string, float -&gt; string</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">vector</span><span class="o">.</span><span class="n">dtype</span>
</code></pre></div></div>

<ul>
  <li>判断</li>
</ul>

<p>与每一个元素进行比较，bool 类型可以当作索引进行取值</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">vector</span> <span class="o">==</span> <span class="mi">2</span>
<span class="c1"># =&gt; array([False, True, False, False], dtype=bool) 
</span>
<span class="c1"># 获取匹配元素
</span><span class="n">equal_to_two</span> <span class="o">=</span> <span class="p">(</span><span class="n">vector</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span>
<span class="k">print</span> <span class="n">equal_to_two</span>
<span class="k">print</span><span class="p">(</span><span class="n">vector</span><span class="p">([</span><span class="n">equal_to_two</span><span class="p">]))</span>
<span class="c1"># =&gt; array([False, True, False, False], dtype=bool)
# =&gt; [2]
</span>
<span class="c1"># 获取二维矩阵中第二列元素等于 3 的行数据
</span><span class="n">second_column_2</span> <span class="o">=</span> <span class="p">(</span><span class="n">matrix</span><span class="p">[:,</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="mi">3</span><span class="p">)</span>
<span class="k">print</span> <span class="n">second_column_2</span>
<span class="k">print</span><span class="p">(</span><span class="n">matrix</span><span class="p">[</span><span class="n">second_column_2</span><span class="p">,</span> <span class="p">:])</span>
<span class="c1"># =&gt; [False, True, False, False]
# =&gt; [[2, 3, 4, 5]]
</span></code></pre></div></div>

<h2 id="矩阵基础">矩阵基础</h2>

<ul>
  <li>
    <table>
      <tbody>
        <tr>
          <td>组合条件 &amp;</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>元素类型转换</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">vector</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="s">"1"</span><span class="p">,</span> <span class="s">"2"</span><span class="p">,</span> <span class="s">"3"</span><span class="p">])</span>
<span class="k">print</span> <span class="p">(</span><span class="n">vector</span><span class="o">.</span><span class="n">dtype</span><span class="p">)</span>
<span class="n">vector</span> <span class="o">=</span> <span class="n">vector</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">float</span><span class="p">)</span>
<span class="k">print</span> <span class="p">(</span><span class="n">vector</span><span class="o">.</span><span class="n">dtype</span><span class="p">)</span>
<span class="k">print</span> <span class="p">(</span><span class="n">vector</span><span class="p">)</span>

<span class="c1"># =&gt; &lt;U1
# =&gt; float64
# =&gt; [1. 2. 3.]
</span></code></pre></div></div>

<ul>
  <li>求极值</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">vector</span><span class="o">.</span><span class="nb">min</span><span class="p">()</span>
</code></pre></div></div>

<ul>
  <li>求和</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">matrix</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">15</span><span class="p">],</span> <span class="p">[</span><span class="mi">20</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">30</span><span class="p">],</span> <span class="p">[</span><span class="mi">35</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">45</span><span class="p">]])</span>
<span class="c1"># 按行求和
</span><span class="n">matrix</span><span class="o">.</span><span class="nb">sum</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="c1"># =&gt; array([ 30,  75, 120])
</span>
<span class="c1"># 按列求和
</span><span class="n">matrix</span><span class="o">.</span><span class="nb">sum</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
<span class="c1"># =&gt; array([60, 75, 90])
</span>
</code></pre></div></div>

<h2 id="常用函数">常用函数</h2>

<ul>
  <li>arange, reshape</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 构建向量
</span><span class="n">numpy</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">15</span><span class="p">)</span>
<span class="c1"># =&gt; array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14])
</span>
<span class="c1"># 构建矩阵
</span><span class="n">a</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">15</span><span class="p">)</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
<span class="c1"># =&gt; array([[ 0,  1,  2,  3,  4],
# =&gt;        [ 5,  6,  7,  8,  9],
# =&gt;        [10, 11, 12, 13, 14]])
</span>
<span class="c1"># 维度
</span><span class="n">a</span><span class="o">.</span><span class="n">ndim</span>
<span class="c1"># =&gt; 2
</span>
<span class="c1"># 类型名字
</span><span class="n">a</span><span class="o">.</span><span class="n">dtype</span><span class="o">.</span><span class="n">name</span>
<span class="c1"># =&gt; 'int64'
</span>
<span class="c1"># 元素个数
</span><span class="n">a</span><span class="o">.</span><span class="n">size</span>
<span class="c1"># =&gt; 15
</span></code></pre></div></div>

<ul>
  <li>初始化</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 初始值都为 0
</span><span class="n">numpy</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span> <span class="c1"># 参数为元组
# =&gt; array([[0., 0., 0., 0.],
# =&gt;        [0., 0., 0., 0.],
# =&gt;        [0., 0., 0., 0.]])
</span>
<span class="c1"># 初始值都为 1
</span><span class="n">numpy</span><span class="o">.</span><span class="n">ones</span><span class="p">((</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span> <span class="n">dtype</span><span class="o">=</span><span class="n">numpy</span><span class="o">.</span><span class="n">int32</span><span class="p">)</span>
<span class="c1"># =&gt; array([[[1, 1, 1, 1],
# =&gt;         [1, 1, 1, 1],
# =&gt;         [1, 1, 1, 1]],
# =&gt;
# =&gt;        [[1, 1, 1, 1],
# =&gt;         [1, 1, 1, 1],
# =&gt;         [1, 1, 1, 1]]], dtype=int32)
</span>
<span class="c1"># 根据起始值、结束值、步长初始化
</span><span class="n">numpy</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
<span class="c1"># =&gt; array([10, 15, 20, 25])
</span>
<span class="c1"># 随机初始化
</span><span class="n">numpy</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">random</span><span class="p">((</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span> <span class="c1"># random 默认范围为 -1 ~ 1
# =&gt; array([[0.03098052, 0.31944657, 0.7471743 ],
# =&gt;        [0.15375132, 0.18301579, 0.16133002]])
</span>
<span class="c1"># 根据范围和数量初始化
</span><span class="n">numpy</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="o">*</span><span class="n">pi</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>
<span class="c1"># =&gt; array([0.        , 0.10526316, 0.21052632, 0.31578947, 0.42105263,
# =&gt;        0.52631579, 0.63157895, 0.73684211, 0.84210526, 0.94736842,
# =&gt;        1.05263158, 1.15789474, 1.26315789, 1.36842105, 1.47368421,
# =&gt;        1.57894737, 1.68421053, 1.78947368, 1.89473684, 2.        ])
</span></code></pre></div></div>

<ul>
  <li>运算</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">50</span><span class="p">])</span>
<span class="c1"># =&gt; array([20, 30, 40, 50])
</span><span class="n">b</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
<span class="c1"># =&gt; array([0, 1, 2, 3])
</span>
<span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">-</span> <span class="n">b</span>
<span class="c1"># =&gt; array([20, 29, 38, 47])
</span>
<span class="n">c</span> <span class="o">=</span> <span class="n">c</span> <span class="o">-</span> <span class="mi">1</span>
<span class="c1"># =&gt; array([19, 28, 37, 46])
</span>
<span class="c1"># 平方
</span><span class="n">b</span><span class="o">**</span><span class="mi">2</span> 
<span class="c1"># =&gt; array([0, 1, 4, 9])
</span>
<span class="n">b</span> <span class="o">&lt;</span> <span class="mi">35</span>
<span class="c1"># =&gt; array([ True,  True,  True,  True])
</span>
<span class="c1"># 乘法
</span><span class="n">A</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span>
		   		 <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">]])</span>
<span class="n">B</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span>
		   		 <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]])</span>

<span class="n">A</span> <span class="o">*</span> <span class="n">B</span> <span class="c1"># 对应位置相乘
# =&gt; array([[2, 0],
# =&gt;        [0, 4]])
</span>
<span class="n">A</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">B</span><span class="p">)</span> <span class="c1"># 矩阵乘法 or numpy.dot(A, B)
# =&gt; array([[5, 4],
# =&gt;        [3, 4]])
</span></code></pre></div></div>

<h2 id="矩阵常用操作">矩阵常用操作</h2>

<ul>
  <li>变换</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">floor</span><span class="p">(</span><span class="mi">10</span><span class="o">*</span><span class="n">numpy</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">random</span><span class="p">((</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">)))</span>
<span class="c1"># =&gt; array([[9., 1., 2., 2.],
# =&gt;        [5., 5., 6., 8.],
# =&gt;        [8., 3., 5., 2.]])
</span>
<span class="c1"># 将矩阵转成向量，与 reshape 相反
</span><span class="n">a</span><span class="o">.</span><span class="n">revel</span><span class="p">()</span>
<span class="c1"># =&gt; array([9., 1., 2., 2., 5., 5., 6., 8., 8., 3., 5., 2.])
</span>
<span class="c1"># 用 shape 指定行列
</span><span class="n">a</span><span class="o">.</span><span class="n">shape</span> <span class="o">=</span> <span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="c1"># 对应 reshape(6, 2)
# =&gt; array([[9., 1.],
# =&gt;        [2., 2.],
# =&gt;        [5., 5.],
# =&gt;        [6., 8.],
# =&gt;        [8., 3.],
# =&gt;        [5., 2.]])
</span>
<span class="c1"># 注意: 对于二维矩阵如果指定 reshape 行数，列数为 -1 程序会自动计算列数，如 a.reshape(3, -1)
</span>
<span class="c1"># 转制
</span><span class="n">a</span><span class="o">.</span><span class="n">T</span>
</code></pre></div></div>

<ul>
  <li>拼接</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">floor</span><span class="p">(</span><span class="mi">10</span><span class="o">*</span><span class="n">numpy</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">random</span><span class="p">((</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">)))</span>
<span class="c1"># =&gt; array([[3., 8.],
# =&gt;        [7., 0.]])
</span><span class="n">b</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">floor</span><span class="p">(</span><span class="mi">10</span><span class="o">*</span><span class="n">numpy</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">random</span><span class="p">((</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">)))</span>
<span class="c1"># =&gt; array([[3., 0.],
# =&gt;        [0., 5.]])
</span>
<span class="c1"># 横向拼接
</span><span class="n">numpy</span><span class="o">.</span><span class="n">hstack</span><span class="p">((</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">))</span>
<span class="c1"># =&gt; array([[3., 8., 3., 0.],
# =&gt;        [7., 0., 0., 5.]])
# 纵向拼接
</span><span class="n">numpy</span><span class="o">.</span><span class="n">vstack</span><span class="p">((</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">))</span>
<span class="c1"># =&gt; array([[3., 8.],
# =&gt;        [7., 0.],
# =&gt;        [3., 0.],
# =&gt;        [0., 5.]])
</span></code></pre></div></div>

<ul>
  <li>切分</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">floor</span><span class="p">(</span><span class="mi">10</span><span class="o">*</span><span class="n">numpy</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">random</span><span class="p">((</span><span class="mi">2</span><span class="p">,</span> <span class="mi">12</span><span class="p">)))</span>
<span class="c1"># =&gt; array([[4., 7., 5., 8., 3., 5., 7., 6., 1., 9., 7., 3.],
# =&gt;       [5., 0., 7., 9., 0., 2., 1., 0., 0., 7., 3., 9.]])
</span>
<span class="c1"># 横向切分
</span><span class="n">numpy</span><span class="o">.</span><span class="n">hsplit</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
<span class="c1"># =&gt; [array([[4., 7., 5., 8.],
# =&gt;        [5., 0., 7., 9.]]), array([[3., 5., 7., 6.],
# =&gt;        [0., 2., 1., 0.]]), array([[1., 9., 7., 3.],
# =&gt;        [0., 7., 3., 9.]])]
</span>
<span class="c1"># 指定位置横向切分
</span><span class="n">numpy</span><span class="o">.</span><span class="n">hsplit</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span> <span class="c1"># 第 3 个后切一刀，第 4 个后切一刀
# =&gt; [array([[4., 7., 5.],
# =&gt;        [5., 0., 7.]]), array([[8.],
# =&gt;        [9.]]), array([[3., 5., 7., 6., 1., 9., 7., 3.],
# =&gt;        [0., 2., 1., 0., 0., 7., 3., 9.]])]
</span>
<span class="c1"># 纵向切分
</span><span class="n">numpy</span><span class="o">.</span><span class="n">vsplit</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="c1"># =&gt; [array([[4., 7., 5., 8., 3., 5., 7., 6., 1., 9., 7., 3.],
# =&gt;        [5., 0., 7., 9., 0., 2., 1., 0., 0., 7., 3., 9.]])]
</span></code></pre></div></div>

<h2 id="不同复制操作对比">不同复制操作对比</h2>

<p>复制有 3 种方法</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 等号赋值，引用与元素都不复制
</span><span class="n">a</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">12</span><span class="p">)</span>
<span class="c1"># =&gt; array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])
</span><span class="n">b</span> <span class="o">=</span> <span class="n">a</span>
<span class="c1"># =&gt; True
</span><span class="n">b</span><span class="o">.</span><span class="n">shape</span> <span class="o">=</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
<span class="n">a</span><span class="o">.</span><span class="n">shape</span>
<span class="c1"># =&gt; (3, 4)
</span><span class="nb">id</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
<span class="c1"># =&gt; 4388924432
</span><span class="nb">id</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
<span class="c1"># =&gt; 4388924432
</span>
<span class="c1"># 浅拷贝，引用复制，元素值不复制
</span><span class="n">c</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="n">view</span><span class="p">()</span>
<span class="n">c</span> <span class="ow">is</span> <span class="n">a</span>
<span class="c1"># =&gt; False
</span><span class="n">c</span><span class="o">.</span><span class="n">shape</span> <span class="o">=</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span>
<span class="n">a</span><span class="o">.</span><span class="n">shape</span>
<span class="c1"># =&gt; (3, 4) a 的 shape 值不变
</span><span class="n">c</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1234</span>
<span class="n">a</span> <span class="c1"># a 的元素值改变
# =&gt; array([[   0,    1,    2,    3],
# =&gt;        [1234,    5,    6,    7],
# =&gt;        [   8,    9,   10,   11]])
</span>
<span class="c1"># 深拷贝, 引用与元素值都复制
</span><span class="n">d</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</code></pre></div></div>

<ul>
  <li>获取最大值索引</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">numpy</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">20</span><span class="p">))</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
<span class="c1"># =&gt; array([[ 0.        ,  0.84147098,  0.90929743,  0.14112001],
# =&gt;        [-0.7568025 , -0.95892427, -0.2794155 ,  0.6569866 ],
# =&gt;        [ 0.98935825,  0.41211849, -0.54402111, -0.99999021],
# =&gt;        [-0.53657292,  0.42016704,  0.99060736,  0.65028784],
# =&gt;        [-0.28790332, -0.96139749, -0.75098725,  0.14987721]])
</span>
<span class="c1"># 每列元素最大值索引(行)
</span><span class="n">ind</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">argmax</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
<span class="c1"># =&gt; array([2, 0, 3, 1])
</span>
<span class="c1"># 根据索引获取最大元素
</span><span class="n">data_max</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">ind</span><span class="p">,</span> <span class="nb">range</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">])]</span>
<span class="c1"># =&gt; array([0.98935825, 0.84147098, 0.99060736, 0.6569866 ])
</span></code></pre></div></div>

<ul>
  <li>扩展</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
<span class="c1"># =&gt; array([ 0, 10, 20, 30])
</span>
<span class="c1"># 扩大到 行元素数乘 3，列元素数乘 5
</span><span class="n">b</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">tile</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>
<span class="c1"># =&gt; array([[ 0, 10, 20, 30,  0, 10, 20, 30,  0, 10, 20, 30,  0, 10, 20, 30, 0, 10, 20, 30],
# =&gt;        [ 0, 10, 20, 30,  0, 10, 20, 30,  0, 10, 20, 30,  0, 10, 20, 30, 0, 10, 20, 30],
# =&gt;        [ 0, 10, 20, 30,  0, 10, 20, 30,  0, 10, 20, 30,  0, 10, 20, 30, 0, 10, 20, 30]])
</span></code></pre></div></div>

<ul>
  <li>排序</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">]])</span>

<span class="c1"># 行元素按从小到大排序
</span><span class="n">b</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="c1"># =&gt; array([[3, 4, 5],
# =&gt;        [1, 1, 2]])
</span>
<span class="c1"># 索引从小到大排序
</span><span class="n">a</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">])</span>
<span class="n">j</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">argsort</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
<span class="c1"># =&gt; array([2, 3, 1, 0])
</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
<span class="c1"># =&gt; array([1, 2, 3, 4])
</span></code></pre></div></div>
:ET